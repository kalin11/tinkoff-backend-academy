HashMap - структура данных, которая позволяет хранить так называемые Ноды (Node), которые имеют ключ и значение.
Зная ключ, мы можем получить значение.

Под капотом у HashMap лежит массив LinkedList'ов. Когда мы пытаемся положить какое-то значение по какому-то ключу,
то вычисляется hashcode ключа. Исходя из этого hashcode вычисляется индекс бакета, в котором будет храниться наше значение.

В процессе добавления значения по ключу возможны несколько ситуаций:
1) на основе hashcode будет выбран пустой бакет, туда добавится наше значение.
2) на основе hashcode будет выбран бакет, который уже имеет какое-то значение. Тогда будет происходить сравнение. Сначала будут сравниваться
hashcode значений. Если hashcode окажутся не равными (т.е. и equals выдаст false), то к существующему значению в бакете в поле next добавится ссылка
на новое значение. Таким образом будет формироваться LinkedList бакета. Если же hashcode окажутся равными, то идет проверка на equals.
если equals выдает false, то мы делаем то же самое, что и описывалось выше (добавляем новый элемент в LinkedList). Если же equals равны, то происходит
перезаписывание существующего значения.

Если коллизий не будет происходить и каждый бакет будет содержать только одно значение, то время доступа будет O(1).
Если же в бакетах будут связные списки, то время доступа ухудшается до O(N), так как нам придется пройтись по всему бакету и сравнить все элементы на equals.

Также, HashMap имеет конструктор, который может принимать два параметра - initial capacity, load factor.
Первый отвечает за размер массива LinkedList'ов (размер массива бакетов), а второй за то в какой момент будет увеличиваться размер массива.

Изначально initial capacity инициализируется 16, а load factor - 0.75. Это означает что при 16 * 0.75 = 12 бакетах, имеющих значения,
наша коллекция расшириться в два раза, причем hashcode у всех уже хранимых значений будет пересчитан и значения будут перераспределены по новым бакетам.

Также стоит отметить, что важно правильно переопределить hashcode и equals, так как основная концепция HashMap работает именно на этом.
Если их плохо переопределить, то возможны коллизии, что очень сильно снизит время доступа к элементу.

Стандартные операции при работе с данной коллекцией - put (положить значение по ключу), get(получить значение по ключу),
remove(по ключу), containsKey(проверка по ключу), entrySet(получение всех Node), keySet (получение всех ключей коллекции),
size (узнать размер коллекции), clear (для очистки коллекции)

Но важно отметить, что HashMap - "умная" коллекция. Когда размер LinkedList превышает какое-то значение, то LinkedList перестраивается в
сбалансированное дерево, а в них уже поиск объекта происходит за O(log n).

И еще одно важное замечание заключается в том, что важно в качестве ключа хранить immutable объекты (например, строки).
Если не делать ключи immutable, то возможны ситуации, когда значения могут просто потеряться и их уже никогда не найти.

Пример: есть класс Person, который имеет поля String name, int age. В подсчете hashcode используются оба поля.
HashMap<Person, Integer> - коллекция, которая в качестве ключа имеет Person, а в качестве значения - курс человека в университете.
Мы добавили объект в мапу. Далее мы изменяем поле name у Person. Соответственно hashcode уже изменился. Если мы попытаемся найти по старому hashcode, то у нас ничего не получится.
